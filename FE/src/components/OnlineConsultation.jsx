import { useState, useEffect } from "react";
import axios from "axios";
import { Video, VideoOff, Clock } from "lucide-react";

const OnlineConsultation = () => {
  const [isInCall, setIsInCall] = useState(false);
  const [consultations, setConsultations] = useState([]);
  const [page, setPage] = useState(0);
  const [size, setSize] = useState(10);
  const [totalPages, setTotalPages] = useState(0);
  const [currentSession, setCurrentSession] = useState(null);
  const [showNoteModal, setShowNoteModal] = useState(false);
  const [consultationNote, setConsultationNote] = useState("");
  const [consultationTime, setConsultationTime] = useState(0);

  useEffect(() => {
    const fetchConsultations = async () => {
      try {
        const currentUser = JSON.parse(localStorage.getItem("user"));
        const consultantId = currentUser?.userId;
        const token = localStorage.getItem("token");

        if (!consultantId || !token) return;

        const url = `/api/consultations/consultant/${consultantId}/consultations?page=${page}&size=${size}`;

        const response = await axios.get(url, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        setConsultations(response.data.consultations || []);
        setTotalPages(response.data.totalPages);
      } catch (err) {
        console.error("‚ùå API l·ªói:", err.response?.data || err.message);
      }
    };

    fetchConsultations();
  }, [page, size]); // üëà m·ªói l·∫ßn page ho·∫∑c size thay ƒë·ªïi s·∫Ω g·ªçi l·∫°i

  useEffect(() => {
    let interval;

    if (isInCall) {
      interval = setInterval(() => {
        setConsultationTime((prev) => prev + 1);
      }, 1000);
    }

    return () => clearInterval(interval); // üëà cleanup khi component unmount ho·∫∑c isInCall = false
  }, [isInCall]);

  // Helper: L·∫•y k√Ω t·ª± vi·∫øt t·∫Øt t√™n
  const getAvatarText = (name) => {
    if (!name) return "";
    const words = name.trim().split(" ");
    const initials = words
      .slice(-2)
      .map((word) => word[0])
      .join("");
    return initials.toUpperCase();
  };

  const completeConsultation = async () => {
    try {
      const token = localStorage.getItem("token");
      const currentUser = JSON.parse(localStorage.getItem("user"));

      if (!currentUser || !token) {
        alert("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng ho·∫∑c token");
        return;
      }

      const response = await axios.post(
        `/api/consultations/${currentSession.consultationId}/complete`,
        null, // Kh√¥ng c·∫ßn body
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      const updated = response.data.consultation;
      console.log("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh COMPLETED:", updated);
      alert("Bu·ªïi t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n th√†nh!");

      // C·∫≠p nh·∫≠t UI
      setIsInCall(false);
      setConsultationTime(0);
      setConsultations((prev) =>
        prev.map((c) =>
          c.consultationId === updated.consultationId ? updated : c
        )
      );
    } catch (err) {
      console.error(
        "‚ùå Kh√¥ng th·ªÉ ƒë√°nh d·∫•u ho√†n th√†nh:",
        err.response?.data || err.message
      );
      alert("Kh√¥ng th·ªÉ ƒë√°nh d·∫•u ho√†n th√†nh. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  // Helper: Format ng√†y + khung gi·ªù
  const formatTimeRange = (dateStr, timeSlot) => {
    if (!timeSlot || !dateStr) return "Th·ªùi gian kh√¥ng x√°c ƒë·ªãnh";

    const [start, end] = timeSlot.split("-").map(s => s.trim());
    if (!start || !end) return "Th·ªùi gian kh√¥ng h·ª£p l·ªá";

    const date = new Date(dateStr);

    // Format ng√†y ki·ªÉu: "Th·ª© S√°u, 18 th√°ng 7"
    const options = { weekday: "long", day: "numeric", month: "long" };
    const formattedDate = new Intl.DateTimeFormat("vi-VN", options).format(date);

    return `${formattedDate}, ${start}‚Äì${end}`;
  };



  // Helper: ƒê·ªãnh d·∫°ng th·ªùi gian t·ª´ gi√¢y => mm:ss
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60)
      .toString()
      .padStart(2, "0");
    const secs = (seconds % 60).toString().padStart(2, "0");
    return `${mins}:${secs}`;
  };

  const startConsultation = async (session) => {
    const token = localStorage.getItem("token");
    const currentUser = JSON.parse(localStorage.getItem("user"));

    if (!currentUser || !token) {
      alert("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng ho·∫∑c token");
      return;
    }

    try {
      const consultationId = session.consultationId;
      // G·ªçi API backend ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† nh·∫≠n meetLink
      const response = await axios.put(
        `/api/consultations/${consultationId}/start`,
        {},

        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      const updatedSession = response.data.consultation; // ‚úÖ L·∫•y ƒë√∫ng property t·ª´ response

      if (!updatedSession.meetLink) {
        alert("Kh√¥ng th·ªÉ l·∫•y li√™n k·∫øt Google Meet!");
        return;
      }

      // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i UI
      setIsInCall(true);
      setCurrentSession(updatedSession);

      // M·ªü meetLink m·ªõi ƒë∆∞·ª£c tr·∫£ v·ªÅ
      window.open(updatedSession.meetLink, "_blank");

      // Optional: c·∫≠p nh·∫≠t l·∫°i danh s√°ch consultation
      setConsultations((prev) =>
        prev.map((c) =>
          c.consultationId === updatedSession.consultationId
            ? updatedSession
            : c
        )
      );
    } catch (err) {
      console.error(
        "‚ùå Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu t∆∞ v·∫•n:",
        err.response?.data || err.message,
        err.response
      );
      alert("Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu t∆∞ v·∫•n. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const endConsultation = async () => {
    const confirmed = window.confirm(
      "B·∫°n c√≥ ch·∫Øc mu·ªën k·∫øt th√∫c bu·ªïi t∆∞ v·∫•n? B·∫°n s·∫Ω ƒë∆∞·ª£c nh·∫≠p ghi ch√∫ ƒë·ªÉ g·ª≠i cho kh√°ch h√†ng."
    );
    if (!confirmed) return;

    // üëâ M·ªü modal ƒë·ªÉ nh·∫≠p ghi ch√∫
    setShowNoteModal(true);
  };

  const submitNoteAndComplete = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token || !currentSession) {
        alert("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c phi√™n t∆∞ v·∫•n ho·∫∑c token");
        return;
      }

      // G·ª≠i ghi ch√∫
      await axios.put(
        `/api/consultations/${currentSession.consultationId}/notes`,
        { note: consultationNote },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      // ƒê√°nh d·∫•u ho√†n th√†nh
      await completeConsultation();

      // Reset UI
      setShowNoteModal(false);
      setConsultationNote("");
      setCurrentSession(null);
      setIsInCall(false);
    } catch (err) {
      console.error("‚ùå L·ªói khi g·ª≠i ghi ch√∫:", err.response?.data || err.message, err);

      alert("Kh√¥ng th·ªÉ g·ª≠i ghi ch√∫ ho·∫∑c ho√†n th√†nh bu·ªïi t∆∞ v·∫•n.");
    }
  };

  const [stats, setStats] = useState({
    totalSessions: 0,
    totalMinutes: 0,
    averageMinutes: 0,
  });

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const token = localStorage.getItem("token");
        const res = await axios.get("/api/consultations/stats/today", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setStats(res.data);
      } catch (err) {
        console.error("Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™", err);
      }
    };

    fetchStats();
  }, []);

  const mapStatus = (status) => {
    switch (status) {
      case "PENDING":
        return "ƒëang ch·ªù";
      case "SCHEDULED":
        return "ƒë√£ l√™n l·ªãch";
      case "ONGOING":
        return "ƒëang t∆∞ v·∫•n";
      case "COMPLETED":
        return "ho√†n th√†nh";
      case "CANCELLED":
        return "ƒë√£ hu·ª∑";
      default:
        return status;
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          T∆∞ v·∫•n tr·ª±c tuy·∫øn
        </h1>
        <p className="text-gray-600">
          Ti·∫øn h√†nh t∆∞ v·∫•n video v·ªõi kh√°ch h√†ng c·ªßa b·∫°n
        </p>
      </div>

      {!isInCall ? (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Upcoming Sessions */}
          <div className="lg:col-span-2">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              Phi√™n s·∫Øp t·ªõi
            </h2>
            <div className="space-y-4">
              {consultations.map((session) => (
                <div
                  key={session.consultationId}
                  className="bg-white p-6 rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-shadow"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-teal-500 rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-sm">
                          {getAvatarText(session.customerName)}
                        </span>
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">{session.customerName}</h3>
                        <p className="text-gray-600 text-sm">
                          {session.serviceNames?.length > 0
                            ? session.serviceNames.join(", ")
                            : "Ch∆∞a c√≥ ch·ªß ƒë·ªÅ"}
                        </p>

                        <div className="flex items-center mt-1 text-sm text-gray-500">
                          <Clock className="w-4 h-4 mr-1" />
                          {formatTimeRange(session.dateScheduled, session.timeSlot)}
                        </div>
                      </div>
                    </div>

                    <div className="flex items-center space-x-3">
                      {/* Tr·∫°ng th√°i m√†u badge theo statusDescription */}
                      <span
                        className={`px-3 py-1 text-xs font-medium rounded-full ${session.statusDescription === "Ch·ªù x√°c nh·∫≠n"
                          ? "bg-green-100 text-green-800"
                          : session.statusDescription === "ƒêang t∆∞ v·∫•n"
                            ? "bg-yellow-100 text-yellow-800"
                            : "bg-blue-100 text-blue-800"
                          }`}
                      >
                        {session.statusDescription}
                      </span>

                      {/* N√∫t tham gia n·∫øu tr·∫°ng th√°i h·ª£p l·ªá */}
                      {["ƒê√£ l√™n l·ªãch", "ƒêang t∆∞ v·∫•n"].includes(
                        session.statusDescription
                      ) ? (
                        <button
                          onClick={() => startConsultation(session)}
                          className="inline-flex items-center px-4 py-2 rounded-lg transition-all duration-200 shadow-md hover:shadow-lg bg-gradient-to-r from-green-500 to-teal-500 text-white hover:from-green-600 hover:to-teal-600"
                        >
                          <Video className="w-4 h-4 mr-2" />
                          {session.statusDescription === "ƒêang t∆∞ v·∫•n"
                            ? "Ti·∫øp t·ª•c t∆∞ v·∫•n"
                            : "Tham gia cu·ªôc g·ªçi"}
                        </button>
                      ) : (
                        <button
                          disabled
                          className="inline-flex items-center px-4 py-2 rounded-lg border border-gray-300 text-gray-400 bg-gray-100 cursor-not-allowed"
                        >
                          <VideoOff className="w-4 h-4 mr-2" />
                          {session.statusDescription === "Ho√†n th√†nh"
                            ? "ƒê√£ ho√†n th√†nh"
                            : "Kh√¥ng kh·∫£ d·ª•ng"}
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
          

          {/* Quick Actions & Settings */}
          <div className="space-y-6">
            <div className="bg-gradient-to-r from-blue-500 to-teal-500 p-6 rounded-xl text-white">
              <h3 className="text-lg font-semibold mb-2">M·∫πo chuy√™n nghi·ªáp</h3>
              <p className="text-sm text-blue-100">
                Lu√¥n ki·ªÉm tra camera v√† microphone tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu bu·ªïi t∆∞ v·∫•n
                ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫£i nghi·ªám t·ªët nh·∫•t cho kh√°ch h√†ng.
              </p>
            </div>
          </div>
        </div>
      ) : (
        <div className="text-center text-gray-600 p-10">
          Bu·ªïi t∆∞ v·∫•n ƒëang di·ªÖn ra.
          <br />
          Khi k·∫øt th√∫c, nh·∫•n <strong>Ho√†n th√†nh</strong> ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.
          <br />
          <br />
          <button
            onClick={endConsultation}
            className="mt-4 px-6 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
          >
            K·∫øt th√∫c & Ho√†n th√†nh
          </button>
        </div>
      )}

      <div className="flex items-center justify-center gap-4 mt-4 pb-4">
            <button
              onClick={() => setPage((p) => Math.max(0, p - 1))}
              disabled={page === 0}
              className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50"
            >
              ‚óÄ Trang tr∆∞·ªõc
            </button>

            <span className="text-sm font-medium text-gray-700">
              Trang {page + 1} / {totalPages}
            </span>

            <button
              onClick={() => setPage((p) => p + 1)}
              disabled={page + 1 >= totalPages}
              className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50"
            >
              Trang sau ‚ñ∂
            </button>

            <select
              value={size}
              onChange={(e) => {
                setSize(Number(e.target.value));
                setPage(0); // reset v·ªÅ trang ƒë·∫ßu n·∫øu ƒë·ªïi size
              }}
              className="ml-4 px-2 py-1 border rounded"
            >
              <option value={5}>5 d√≤ng/trang</option>
              <option value={10}>10 d√≤ng/trang</option>
              <option value={20}>20 d√≤ng/trang</option>
            </select>
          </div>

      {showNoteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg w-full max-w-md shadow-lg">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">
              Ghi ch√∫ bu·ªïi t∆∞ v·∫•n
            </h2>
            <textarea
              className="w-full border px-3 py-2 rounded mb-4"
              rows={5}
              placeholder="Nh·∫≠p ghi ch√∫ b·∫°n mu·ªën g·ª≠i cho kh√°ch h√†ng"
              value={consultationNote}
              onChange={(e) => setConsultationNote(e.target.value)}
              maxLength={1000}
            />
            <div className="flex justify-end gap-3">
              <button
                className="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400"
                onClick={() => setShowNoteModal(false)}
              >
                H·ªßy
              </button>
              <button
                className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                onClick={submitNoteAndComplete}
              >
                G·ª≠i v√† Ho√†n t·∫•t
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OnlineConsultation;
