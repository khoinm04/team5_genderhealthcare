package com.ghsms.controller;

import com.ghsms.DTO.ContraceptiveScheduleDTO;
import com.ghsms.config.UserPrincipal;
import com.ghsms.model.ContraceptiveSchedule;
import com.ghsms.service.ContraceptiveScheduleService;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/contraceptive-schedules")
@RequiredArgsConstructor
@Validated
public class ContraceptiveScheduleController {
    private final ContraceptiveScheduleService contraceptiveScheduleService;

    // 1. ƒêƒÉng k√Ω l·ªãch u·ªëng thu·ªëc tr√°nh thai
    @PostMapping
    public ResponseEntity<ContraceptiveScheduleDTO> registerSchedule(
            @RequestBody @Valid ContraceptiveScheduleDTO dto,
            @AuthenticationPrincipal UserPrincipal principal
    ) {
        try {
            dto.setUserId(principal.getId());
            return ResponseEntity.ok(contraceptiveScheduleService.registerSchedule(dto));
        } catch (Exception e) {
            e.printStackTrace(); // üí• IN L·ªñI RA CONSOLE
            throw e;
        }
    }


    // 2. L·∫•y danh s√°ch l·ªãch u·ªëng thu·ªëc active c·ªßa m·ªôt user
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<ContraceptiveScheduleDTO>> getSchedulesByUser(
            @PathVariable @Min(value = 1, message = "userId ph·∫£i l·ªõn h∆°n 0") Long userId) {
        return ResponseEntity.ok(contraceptiveScheduleService.getSchedulesByUser(userId));
    }

    // 3. X√°c nh·∫≠n ƒë√£ u·ªëng thu·ªëc h√¥m nay
    @PatchMapping("/{scheduleId}/confirm")
    public ResponseEntity<String> confirmTaken(
            @PathVariable @Min(value = 1, message = "scheduleId ph·∫£i l·ªõn h∆°n 0") Long scheduleId) {
        try {
            contraceptiveScheduleService.confirmTaken(scheduleId);
            // X√°c nh·∫≠n th√†nh c√¥ng, kh√¥ng c√≥ l·ªói
            return ResponseEntity.ok("ƒê√£ x√°c nh·∫≠n b·∫°n ƒë√£ u·ªëng thu·ªëc h√¥m nay!");
        } catch (RuntimeException ex) {
            // N·∫øu trong k·ª≥ ngh·ªâ 7 ng√†y ho·∫∑c c√≥ l·ªói kh√°c
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    //d√πng ƒë·ªÉ d·ª´ng nh·∫Øc nh·ªü khi ng∆∞·ªùi d√πng kh√¥ng c√≤n d√πng n·ªØa
    @DeleteMapping("/{scheduleId}")
    public ResponseEntity<String> deleteSchedule(
            @PathVariable @Min(value = 1, message = "scheduleId ph·∫£i l·ªõn h∆°n 0") Long scheduleId,
            @RequestParam @Min(value = 1, message = "userId ph·∫£i l·ªõn h∆°n 0") Long userId) {
        try {
            contraceptiveScheduleService.deleteSchedule(scheduleId, userId);
            return ResponseEntity.ok("ƒê√£ x√≥a th√†nh c√¥ng l·ªãch u·ªëng thu·ªëc!");
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    @GetMapping("/current")
    public ResponseEntity<?> getCurrentScheduleWithHistory(@AuthenticationPrincipal UserPrincipal principal) {
        Long userId = principal.getId();

        ContraceptiveSchedule schedule = contraceptiveScheduleService.getActiveScheduleByUserId(userId);
        Map<String, Boolean> history = contraceptiveScheduleService.generatePillHistory(schedule);

        return ResponseEntity.ok(
                Map.of(
                        "schedule", contraceptiveScheduleService.toDTO(schedule),
                        "history", history
                )
        );
    }

    // ‚úÖ TH√äM M·ªöI: API l·∫•y th·ªëng k√™ qu√™n u·ªëng thu·ªëc
    @GetMapping("/{scheduleId}/missed-stats")
    public ResponseEntity<Map<String, Object>> getMissedStats(
            @PathVariable @Min(value = 1, message = "scheduleId ph·∫£i l·ªõn h∆°n 0") Long scheduleId,
            @AuthenticationPrincipal UserPrincipal principal) {
        try {
            ContraceptiveSchedule schedule = contraceptiveScheduleService.getScheduleById(scheduleId);

            if (!schedule.getUser().getUserId().equals(principal.getId())) {
                return ResponseEntity.badRequest().body(Map.of("error", "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin n√†y!"));
            }

            Map<String, Object> stats = Map.of(
                    "scheduleId", scheduleId,
                    "missedDates", schedule.getMissedPillDates(),
                    "totalMissedDays", schedule.getMissedPillDates().size(),
                    "consecutiveMissedCount", schedule.getMissedCount(),
                    "pillType", schedule.getType(),
                    "maxAllowedMissed", schedule.getType().equals("21") ? 0 : 3
            );

            return ResponseEntity.ok(stats);

        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(Map.of("error", ex.getMessage()));
        }
    }

    // ‚úÖ TH√äM M·ªöI: Helper method ƒë·ªÉ x√°c ƒë·ªãnh m·ª©c ƒë·ªô c·∫£nh b√°o
    private String getWarningLevel(ContraceptiveSchedule schedule) {
        int missed = schedule.getMissedCount();
        int maxAllowed = schedule.getType().equals("21") ? 0 : 3;

        if (missed == 0) {
            return "SAFE"; // An to√†n
        } else if (missed <= maxAllowed / 2) {
            return "WARNING"; // C·∫£nh b√°o
        } else if (missed < maxAllowed) {
            return "DANGER"; // Nguy hi·ªÉm, s·∫Øp b·ªã x√≥a
        } else {
            return "CRITICAL"; // R·∫•t nguy hi·ªÉm, phaÃâi x√≥a ngay
        }

    }
}
