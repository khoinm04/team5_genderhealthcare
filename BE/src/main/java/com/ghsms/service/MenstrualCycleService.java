package com.ghsms.service;

import com.ghsms.DTO.MenstrualCycleDTO;
import com.ghsms.DTO.NotificationDTO;
import com.ghsms.model.MenstrualCycle;
import com.ghsms.model.Notification;
import com.ghsms.model.User;
import com.ghsms.repository.MenstrualCycleRepository;
import com.ghsms.repository.NotificationRepository;
import com.ghsms.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class MenstrualCycleService {
    private final MenstrualCycleRepository menstrualCycleRepository;
    private final NotificationRepository notificationRepository;
    private final UserRepository userRepository;
    private final SimpMessagingTemplate messagingTemplate;


    // Th√™m th√¥ng tin theo d√µi chu k·ª≥ kinh nguy·ªát
    public MenstrualCycle trackCycle(Long customerId, LocalDate startDate, Integer cycleLength, Integer menstruationDuration, String notes) {
        try {
            System.out.println("üìå trackCycle START");
            System.out.println("customerId: " + customerId);
            System.out.println("startDate: " + startDate);
            System.out.println("cycleLength: " + cycleLength);
            System.out.println("menstruationDuration: " + menstruationDuration);

            LocalDate currentDate = LocalDate.now();

            MenstrualCycle cycle = new MenstrualCycle();

            // G√°n customer
            User user = userRepository.findById(customerId)
                    .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + customerId));
            cycle.setCustomer(user);

            // Ki·ªÉm tra ƒë√£ c√≥ chu k·ª≥ ch∆∞a
            menstrualCycleRepository.findByCustomer_userId(customerId)
                    .ifPresent(existingCycle -> {
                        throw new RuntimeException("‚ùå Ng∆∞·ªùi d√πng ƒë√£ c√≥ chu k·ª≥ ƒë∆∞·ª£c theo d√µi.");
                    });

            // Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu
            int validCycleLength = (cycleLength != null) ? cycleLength : 28;
            LocalDate minDate = currentDate.minusDays(validCycleLength);

            if (startDate.isBefore(minDate)) {
                throw new RuntimeException("‚ùå Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c c√°ch qu√° " + validCycleLength + " ng√†y.");
            }

            if (startDate.isAfter(currentDate)) {
                throw new RuntimeException("‚ùå Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c sau ng√†y hi·ªán t·∫°i.");
            }

            cycle.setStartDate(startDate);

            // Ki·ªÉm tra cycle length
            if (cycleLength != null) {
                if (cycleLength < 20 || cycleLength > 45) {
                    throw new RuntimeException("‚ùå S·ªë ng√†y gi·ªØa chu k·ª≥ ph·∫£i t·ª´ 20-45 ng√†y.");
                }
                cycle.setCycleLength(cycleLength);
            } else {
                cycle.setCycleLength(28);
            }

            // Ki·ªÉm tra menstruationDuration
            if (menstruationDuration != null) {
                if (menstruationDuration < 1 || menstruationDuration > 10) {
                    throw new RuntimeException("‚ùå S·ªë ng√†y h√†nh kinh ph·∫£i t·ª´ 1-10 ng√†y.");
                }
                cycle.setMenstruationDuration(menstruationDuration);
            } else {
                cycle.setMenstruationDuration(5);
            }

            cycle.setNotes(notes);

            // T√≠nh to√°n d·ª± ƒëo√°n
            calculatePredictions(cycle);

            System.out.println("‚úÖ Tr∆∞·ªõc khi save:");
            System.out.println("UserID: " + user.getUserId());
            System.out.println("StartDate: " + cycle.getStartDate());
            System.out.println("Length: " + cycle.getCycleLength());
            System.out.println("Menstruation: " + cycle.getMenstruationDuration());

            return menstrualCycleRepository.save(cycle);
        } catch (Exception e) {
            System.err.println("üí• L·ªói khi x·ª≠ l√Ω trackCycle:");
            e.printStackTrace(); // In ƒë·∫ßy ƒë·ªß stacktrace ra console
            throw e; // Cho ph√©p Spring tr·∫£ l·ªói 500 v·ªÅ client ƒë·ªÉ debug
        }
    }


    private void calculatePredictions(MenstrualCycle cycle) {
        // end period date
        cycle.setEndDate(cycle.getStartDate().plusDays(cycle.getCycleLength() - 1));

        //set ovulation prediction (typically 14 days before next period)
        cycle.setPredictedOvulationDate(cycle.getStartDate().plusDays(cycle.getCycleLength() - 14));

        //set predicted fertile window start date
        cycle.setPredictedFertileWindowStartDate(cycle.getStartDate().plusDays(cycle.getCycleLength() - 17));

        //set predicted fertile window end date
        cycle.setPredictedFertileWindowEndDate((cycle.getPredictedOvulationDate()));

        // Next period prediction
        cycle.setNextPredictedDate(cycle.getStartDate().plusDays(cycle.getCycleLength()));
    }


    public LocalDate getPredictedNextDate(Long customerId) {
        MenstrualCycle currentCycle = getCurrentCycle(customerId);
        return currentCycle != null ? currentCycle.getNextPredictedDate() : null;
    }

    public LocalDate getOvulationDate(Long customerId) {
        MenstrualCycle currentCycle = getCurrentCycle(customerId);
        return currentCycle != null ? currentCycle.getPredictedOvulationDate() : null;
    }

    public MenstrualCycle getCurrentCycle(Long customerId) {
        return menstrualCycleRepository.findByCustomer_userId(customerId).
                orElseThrow(() -> new RuntimeException("Vui l√≤ng nh·∫≠p chu k·ª≥ kinh nguy·ªát c·ªßa b·∫°n tr∆∞·ªõc khi th·ª±c hi·ªán ch·ª©c nƒÉng n√†y"));
    }

    public void deleteMenstrualCycle(Long customerId, Long cycleId) {
        MenstrualCycle cycle = menstrualCycleRepository.findById(cycleId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y chu k·ª≥ kinh nguy·ªát n√†y"));

        // Verify the cycle belongs to the customer
        if (!cycle.getCustomer().getUserId().equals(customerId)) {
            throw new RuntimeException("Kh√¥ng c√≥ quy·ªÅn x√≥a chu k·ª≥ kinh nguy·ªát n√†y");
        }

        menstrualCycleRepository.delete(cycle);
    }

    public MenstrualCycle getAllPredicted(Long customerId) {
        Optional<MenstrualCycle> cycles = menstrualCycleRepository
                .findByCustomer_userId(customerId);
        if (cycles.isEmpty()) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y chu k·ª≥ kinh nguy·ªát c·ªßa b·∫°n: " + customerId);
        }
        return cycles.get();
    }

    public MenstrualCycle updateCycle(Long customerId, Long cycleId, LocalDate startDate,
                                      Integer cycleLength, Integer menstruationDuration, String notes) {
        LocalDate currentDate = LocalDate.now();

        MenstrualCycle cycle = menstrualCycleRepository.findById(cycleId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y chu k·ª≥ kinh nguy·ªát c·ªßa kh√°ch h√†ng"));

        // Verify ownership
        if (!cycle.getCustomer().getUserId().equals(customerId)) {
            throw new RuntimeException("Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t chu k·ª≥ kinh nguy·ªát n√†y");
        }

        int validCycleLength = cycleLength != null ? cycleLength : 28;

        LocalDate minDate = currentDate.minusDays(validCycleLength);

        if(startDate.isBefore(minDate)){
            throw new RuntimeException("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c c√°ch qu√° " + validCycleLength + " ng√†y so v·ªõi hi·ªán t·∫°i");
        }

        if (startDate.isAfter(currentDate)) {
            throw new RuntimeException("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c sau ng√†y hi·ªán t·∫°i");
        }
        // Update start date
        cycle.setStartDate(startDate);

        // Validate and update cycle length
        if (cycleLength != null) {
            if (cycleLength < 20 || cycleLength > 45) {
                throw new RuntimeException("S·ªë ng√†y gi·ªØa 2 chu k·ª≥ ph·∫£i t·ª´ 20 ƒë·∫øn 45 ng√†y, n·∫øu kh√¥ng b·∫°n n√™n ƒëi ki·ªÉm tra s·ª©c kh·ªèe");
            }
            cycle.setCycleLength(cycleLength);
        }

        // Validate and update menstruation duration
        if (menstruationDuration != null) {
            if (menstruationDuration < 1 || menstruationDuration > 10) {
                throw new RuntimeException("S·ªë ng√†y h√†nh kinh ph·∫£i t·ª´ 1 ƒë·∫øn 10 ng√†y, n·∫øu kh√¥ng b·∫°n n√™n ƒëi ki·ªÉm tra s·ª©c kh·ªèe");
            }
            cycle.setMenstruationDuration(menstruationDuration);
        }

        // Validate and update notes
        if (notes != null && notes.length() > 255) {
            throw new RuntimeException("Ch√∫ th√≠ch n√™n √≠t h∆°n 255 k√Ω t·ª±");
        }
        if (notes != null) {
            cycle.setNotes(notes);
        }

        // Recalculate predictions
        calculatePredictions(cycle);

        return menstrualCycleRepository.save(cycle);
    }

    // Scheduled task to send notifications for upcoming menstrual cycle events

    @Scheduled(cron = "0 0 8 * * *", zone = "Asia/Ho_Chi_Minh") // Run at 8 AM daily
    public void sendReminders() {
        LocalDate today = LocalDate.now();

        // Nh·∫Øc nh·ªü chu k·ª≥ kinh nguy·ªát
        sendMenstrualCycleReminders(today);
    }

    private void sendMenstrualCycleReminders(LocalDate today) {
        // 1. Nh·∫Øc nh·ªü ng√†y s·∫Øp ƒë·∫øn chu k·ª≥ kinh nguy·ªát
        List<MenstrualCycle> upcomingCyclesBefore2Day = menstrualCycleRepository.findByNextPredictedDateEquals(today.plusDays(2));
        for (MenstrualCycle cycle : upcomingCyclesBefore2Day) {
            createNotification(cycle, "Chu k·ª≥ kinh nguy·ªát c·ªßa b·∫°n d·ª± ki·∫øn s·∫Ω b·∫Øt ƒë·∫ßu trong 2 ng√†y t·ªõi.");
        }

        List<MenstrualCycle> upcomingCyclesBefore1Day = menstrualCycleRepository.findByNextPredictedDateEquals(today.plusDays(1));
        for (MenstrualCycle cycle : upcomingCyclesBefore1Day) {
            createNotification(cycle, "Chu k·ª≥ kinh nguy·ªát c·ªßa b·∫°n d·ª± ki·∫øn s·∫Ω b·∫Øt ƒë·∫ßu v√†o ng√†y mai.");
        }

        // 2. Nh·∫Øc nh·ªü ng√†y r·ª•ng tr·ª©ng
        List<MenstrualCycle> ovulationCycles = menstrualCycleRepository.findByPredictedOvulationDateEquals(today);
        for (MenstrualCycle cycle : ovulationCycles) {
            createNotification(cycle, "H√¥m nay l√† ng√†y r·ª•ng tr·ª©ng d·ª± ki·∫øn. N·∫øu b·∫°n c√≥ k·∫ø ho·∫°ch mang thai ho·∫∑c ph√≤ng tr√°nh thai, h√£y l∆∞u √Ω nh√©!");
        }

        // 3. Nh·∫Øc nh·ªü b·∫Øt ƒë·∫ßu c·ª≠a s·ªï th·ª• thai
        List<MenstrualCycle> fertileWindowStartCycles = menstrualCycleRepository.findByPredictedFertileWindowStartDateEquals(today);
        for (MenstrualCycle cycle : fertileWindowStartCycles) {
            createNotification(cycle, "H√¥m nay l√† ng√†y b·∫Øt ƒë·∫ßu b·∫Øt ƒë·∫ßu chu·ªói ng√†y c√≥ kh·∫£ nƒÉng th·ª• thai cao.");
        }

        // 4. Nh·∫Øc nh·ªü k·∫øt th√∫c c·ª≠a s·ªï th·ª• thai
        List<MenstrualCycle> fertileWindowEndCycles = menstrualCycleRepository.findByPredictedFertileWindowEndDateEquals(today);
        for (MenstrualCycle cycle : fertileWindowEndCycles) {
            createNotification(cycle, "H√¥m nay l√† ng√†y k·∫øt th√∫c chu·ªói ng√†y c√≥ kh·∫£ nƒÉng th·ª• thai cao.");
        }
    }


    public MenstrualCycleDTO toDTO(MenstrualCycle cycle) {
        if (cycle == null) return null;

        return MenstrualCycleDTO.builder()
                .cycleId(cycle.getCycleId())
                .userId(cycle.getCustomer().getUserId())
                .startDate(cycle.getStartDate())
                .endDate(cycle.getEndDate())
                .cycleLength(cycle.getCycleLength())
                .menstruationDuration(cycle.getMenstruationDuration())
                .nextPredictedDate(cycle.getNextPredictedDate())
                .predictedOvulationDate(cycle.getPredictedOvulationDate())
                .predictedFertileWindowStartDate(cycle.getPredictedFertileWindowStartDate())
                .predictedFertileWindowEndDate(cycle.getPredictedFertileWindowEndDate())
                .notes(cycle.getNotes())
                .build();
    }


//    public void createNotification(MenstrualCycle cycle, String message) {
//        Notification notification = new Notification();
//        notification.setUser(cycle.getCustomer());
//        notification.setMessage(message);
//        notification.setCreatedAt(LocalDateTime.now());
//        notificationRepository.save(notification);
//    }

    public void createNotification(MenstrualCycle cycle, String message) {
        // 1. L∆∞u database
        Notification notification = new Notification();
        notification.setUser(cycle.getCustomer());
        notification.setMessage(message);
        notification.setCreatedAt(LocalDateTime.now());
        notificationRepository.save(notification);

        // 2. G·ª≠i WebSocket
        messagingTemplate.convertAndSend(
                "/topic/user/" + cycle.getCustomer().getUserId(),
                message
        );

        System.out.println("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o chu k·ª≥ cho user: " + cycle.getCustomer().getUserId());
    }
}